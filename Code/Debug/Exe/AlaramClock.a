;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;
;// I2C Bus functions
;#include <i2c.h>
;
;// PCF8583 Real Time Clock functions
;#include <pcf8583.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;#include <stdio.h>
;#include <string.h>
;
;// crystal frequency - 1MHz
;#define xtal 1000000
;
;#define ddelay 50
;#define alarm PORTD.0
;
;// Declare your global variables here
;int mscounter;
;char lcd_buff[16];
;char alarm_state[4];
;bit bitcheck;
;unsigned char rtchour, rtcmin, rtcsec, rtchsec;
;unsigned char chour, cminute;
;eeprom unsigned char alarmstate;
;eeprom unsigned char alhour, alminute;
;
;// functions
;void loop(void);
;void refresh_lcd(void);
;
;void main(void)
; 0000 0027 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0028 // Declare your local variables here
; 0000 0029 
; 0000 002A // set PORTA as input for LCD - values = 0
; 0000 002B DDRA=0x00;
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 002C PORTA=0x00;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 002D 
; 0000 002E // set PORTB as output for buttons - values = 1
; 0000 002F DDRB=0xFF;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0030 PORTB=0xFF;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0031 
; 0000 0032 // set PIN0 of PORTD as output - value = 0
; 0000 0033 DDRD.0=1;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0034 PORTD.0=0;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0035 
; 0000 0036 // Timer/Counter 1 initialization
; 0000 0037 // Clock source: System Clock
; 0000 0038 // Clock value: 1000.000 kHz
; 0000 0039 // Mode: Normal top=0xFFFF
; 0000 003A // OC1A output: Disconnected
; 0000 003B // OC1B output: Disconnected
; 0000 003C // Noise Canceler: Off
; 0000 003D // Input Capture on Falling Edge
; 0000 003E // Timer Period: 65.536 ms
; 0000 003F // Timer1 Overflow Interrupt: On
; 0000 0040 // Input Capture Interrupt: Off
; 0000 0041 // Compare A Match Interrupt: Off
; 0000 0042 // Compare B Match Interrupt: Off
; 0000 0043 TCCR1A=0x00;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0044 TCCR1B=0x01;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0045 TCNT1H=0x00;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0046 TCNT1L=0x00;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0047 ICR1H=0x00;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0048 ICR1L=0x00;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0049 OCR1AH=0x00;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 004A OCR1AL=0x00;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 004B OCR1BH=0x00;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 004C OCR1BL=0x00;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 004D 
; 0000 004E // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 004F TIMSK=0x04;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0050 
; 0000 0051 // Bit-Banged I2C Bus initialization
; 0000 0052 // I2C Port: PORTC
; 0000 0053 // I2C SDA bit: 1
; 0000 0054 // I2C SCL bit: 0
; 0000 0055 // Bit Rate: 100 kHz
; 0000 0056 // Note: I2C settings are specified in the
; 0000 0057 // Project|Configure|C Compiler|Libraries|I2C menu.
; 0000 0058 i2c_init();
;PCODE: $00000030 VOL: 0
; 0000 0059 
; 0000 005A // PCF8583 Real Time Clock initialization
; 0000 005B rtc_init(0,0);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 005C 
; 0000 005D 
; 0000 005E lcd_init(16);
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 005F lcd_clear();
;PCODE: $00000037 VOL: 0
; 0000 0060 lcd_puts("  Alarm  Clock  ");
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0061 delay_ms(2500);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0062 lcd_clear();
;PCODE: $0000003D VOL: 0
; 0000 0063 
; 0000 0064 // Global enable interrupts
; 0000 0065 #asm("sei")
;PCODE: $0000003E VOL: 0
	sei
;PCODE: $0000003F VOL: 0
; 0000 0066 
; 0000 0067     if (alarmstate == 255)
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0068     {
; 0000 0069         sprintf(alarm_state, "ON ");
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 006A     }
; 0000 006B     if (alarmstate == 0)
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 006C     {
; 0000 006D         sprintf(alarm_state, "OFF");
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 006E     }
; 0000 006F     rtc_get_time(0, &rtchour, &rtcmin, &rtcsec, &rtchsec);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0070 
; 0000 0071     loop();
;PCODE: $00000066 VOL: 0
; 0000 0072 }
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0

	.DSEG
_0x7:
	.BYTE 0x11
;
;void loop(void)
; 0000 0075 {

	.CSEG
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0076     while (1)
;PCODE: $0000006C VOL: 0
; 0000 0077     {
; 0000 0078         refresh_lcd();
;PCODE: $0000006D VOL: 0
; 0000 0079         //Check hour button
; 0000 007A         bitcheck = PINB.0;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 007B         delay_ms(ddelay);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 007C         bitcheck = bitcheck | PINB.0;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 007D         if (bitcheck == 0)
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 007E         {
; 0000 007F             chour = rtchour;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0080             chour ++;
;PCODE: $00000082 VOL: 0
; 0000 0081             if (chour > 23)
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0082             {
; 0000 0083                 chour = 0;
;PCODE: $00000086 VOL: 0
; 0000 0084             }
; 0000 0085             rtc_set_time(0,chour,rtcmin,0,0);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0086             rtc_get_time(0, &rtchour, &rtcmin, &rtcsec, &rtchsec);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0087         }
; 0000 0088         //Check minute button
; 0000 0089         bitcheck = PINB.1;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 008A         delay_ms(ddelay);
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 008B         bitcheck = bitcheck | PINB.1;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 008C         if (bitcheck == 0)
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 008D         {
; 0000 008E             cminute = rtcmin;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 008F             cminute ++;
;PCODE: $000000AF VOL: 0
; 0000 0090             if (cminute > 59)
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0091             {
; 0000 0092                 cminute = 0;
;PCODE: $000000B3 VOL: 0
; 0000 0093             }
; 0000 0094             rtc_set_time(0,rtchour,cminute,0,0);
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0095             rtc_get_time(0, &rtchour, &rtcmin, &rtcsec, &rtchsec);
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0096         }
; 0000 0097         //Check Alarm hour button
; 0000 0098         bitcheck = PINB.2;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0099         delay_ms(ddelay);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 009A         bitcheck = bitcheck | PINB.2;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 009B         if (bitcheck == 0)
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 009C         {
; 0000 009D             alhour ++;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 009E             if (alhour > 23)
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 009F                 alhour = 0;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00A0         }
;PCODE: $000000E5 VOL: 0
; 0000 00A1         //Check Alarm minute button
; 0000 00A2         bitcheck = PINB.3;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00A3         delay_ms(ddelay);
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00A4         bitcheck = bitcheck | PINB.3;
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00A5         if (bitcheck == 0)
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00A6         {
; 0000 00A7             alminute ++;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00A8             if (alminute > 59)
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 00A9                 alminute = 0;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00AA         }
;PCODE: $00000104 VOL: 0
; 0000 00AB         //Check Alarm state
; 0000 00AC         bitcheck = PINB.4;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00AD         delay_ms(ddelay);
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00AE         bitcheck = bitcheck | PINB.4;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00AF         if (bitcheck == 0)
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00B0         {
; 0000 00B1             if (alarmstate == 0)
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00B2             {
; 0000 00B3                 alarmstate = 255;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00B4                 sprintf(alarm_state, "ON ");
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 00B5             }
; 0000 00B6             else if (alarmstate == 255)
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 00B7             {
; 0000 00B8                 alarmstate = 0;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 00B9                 sprintf(alarm_state, "OFF");
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00BA             }
; 0000 00BB         }
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 00BC         //alarm
; 0000 00BD         if (alhour == rtchour && alminute == rtcmin)
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 00BE         {
; 0000 00BF             if (alarmstate == 255)
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00C0             {
; 0000 00C1                 alarm = 1;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 00C2             }
; 0000 00C3         }
;PCODE: $0000014F VOL: 0
; 0000 00C4         //
; 0000 00C5         if (alarm == 1 && alarmstate == 0)
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 00C6         {
; 0000 00C7             alarm = 0;
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 00C8         }
; 0000 00C9 
; 0000 00CA     }
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 00CB }
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;
;void refresh_lcd(void)
; 0000 00CE {
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 00CF     // display the time on the LCD
; 0000 00D0     sprintf(lcd_buff,"Time: %2d:%02d:%02d",rtchour, rtcmin, rtcsec);
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 00D1     lcd_clear();
;PCODE: $00000177 VOL: 0
; 0000 00D2     lcd_gotoxy(0, 0);
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 00D3     lcd_puts(lcd_buff);
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 00D4     sprintf(lcd_buff,"Alrm: %2d:%02d %s", alhour, alminute, alarm_state);
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 00D5     lcd_gotoxy(0, 1);
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 00D6     lcd_puts(lcd_buff);
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 00D7 }
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 00DB {
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 00DC     mscounter ++;
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 00DD     if (mscounter == 15)
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 00DE     {
; 0000 00DF         //initial
; 0000 00E0         mscounter = 0;
;PCODE: $000001A2 VOL: 0
; 0000 00E1         // read the time from the RTC 0
; 0000 00E2         rtc_get_time(0, &rtchour, &rtcmin, &rtcsec, &rtchsec);
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 00E3     }
; 0000 00E4 }
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
