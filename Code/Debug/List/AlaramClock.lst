
AVRASM ver. 2.1.30  E:\Rizpar\Project\Code2\Debug\List\AlaramClock.asm Fri Feb 05 05:31:33 2021

E:\Rizpar\Project\Code2\Debug\List\AlaramClock.asm(1088): warning: Register r4 already defined by the .DEF directive
E:\Rizpar\Project\Code2\Debug\List\AlaramClock.asm(1089): warning: Register r5 already defined by the .DEF directive
E:\Rizpar\Project\Code2\Debug\List\AlaramClock.asm(1090): warning: Register r7 already defined by the .DEF directive
E:\Rizpar\Project\Code2\Debug\List\AlaramClock.asm(1091): warning: Register r6 already defined by the .DEF directive
E:\Rizpar\Project\Code2\Debug\List\AlaramClock.asm(1092): warning: Register r9 already defined by the .DEF directive
E:\Rizpar\Project\Code2\Debug\List\AlaramClock.asm(1093): warning: Register r8 already defined by the .DEF directive
E:\Rizpar\Project\Code2\Debug\List\AlaramClock.asm(1094): warning: Register r11 already defined by the .DEF directive
E:\Rizpar\Project\Code2\Debug\List\AlaramClock.asm(1095): warning: Register r10 already defined by the .DEF directive
E:\Rizpar\Project\Code2\Debug\List\AlaramClock.asm(1096): warning: Register r13 already defined by the .DEF directive
E:\Rizpar\Project\Code2\Debug\List\AlaramClock.asm(1097): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _mscounter=R4
                 	.DEF _mscounter_msb=R5
                 	.DEF _rtchour=R7
                 	.DEF _rtcmin=R6
                 	.DEF _rtcsec=R9
                 	.DEF _rtchsec=R8
                 	.DEF _chour=R11
                 	.DEF _cminute=R10
                 	.DEF __lcd_x=R13
                 	.DEF __lcd_y=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 01b5 	JMP  _timer1_ovf_isr
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G102:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G102:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 _0x0:
000034 2020
000035 6c41
000036 7261
000037 206d      	.DB  0x20,0x20,0x41,0x6C,0x61,0x72,0x6D,0x20
000038 4320
000039 6f6c
00003a 6b63
00003b 2020      	.DB  0x20,0x43,0x6C,0x6F,0x63,0x6B,0x20,0x20
00003c 4f00
00003d 204e
00003e 4f00
00003f 4646      	.DB  0x0,0x4F,0x4E,0x20,0x0,0x4F,0x46,0x46
000040 5400
000041 6d69
000042 3a65
000043 2520      	.DB  0x0,0x54,0x69,0x6D,0x65,0x3A,0x20,0x25
000044 6432
000045 253a
000046 3230
000047 3a64      	.DB  0x32,0x64,0x3A,0x25,0x30,0x32,0x64,0x3A
000048 3025
000049 6432
00004a 4100
00004b 726c      	.DB  0x25,0x30,0x32,0x64,0x0,0x41,0x6C,0x72
00004c 3a6d
00004d 2520
00004e 6432
00004f 253a      	.DB  0x6D,0x3A,0x20,0x25,0x32,0x64,0x3A,0x25
000050 3230
000051 2064
000052 7325
E:\Rizpar\Project\Code2\Debug\List\AlaramClock.asm(1146): warning: .cseg .db misalignment - padding zero byte
000053 0000      	.DB  0x30,0x32,0x64,0x20,0x25,0x73,0x0
                 _0x2020003:
000054 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000055 0001      	.DW  0x01
000056 0002      	.DW  0x02
000057 0066      	.DW  __REG_BIT_VARS*2
                 
000058 0011      	.DW  0x11
000059 0160      	.DW  _0x7
00005a 0068      	.DW  _0x0*2
                 
00005b 0002      	.DW  0x02
00005c 0186      	.DW  __base_y_G101
00005d 00a8      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
00005e 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00005f 94f8      	CLI
000060 27ee      	CLR  R30
000061 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000062 e0f1      	LDI  R31,1
000063 bffb      	OUT  GICR,R31
000064 bfeb      	OUT  GICR,R30
000065 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000066 e08d      	LDI  R24,(14-2)+1
000067 e0a2      	LDI  R26,2
000068 27bb      	CLR  R27
                 __CLEAR_REG:
000069 93ed      	ST   X+,R30
00006a 958a      	DEC  R24
00006b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00006c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00006d e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00006e e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00006f 93ed      	ST   X+,R30
000070 9701      	SBIW R24,1
000071 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000072 eaea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000073 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000074 9185      	LPM  R24,Z+
000075 9195      	LPM  R25,Z+
000076 9700      	SBIW R24,0
000077 f061      	BREQ __GLOBAL_INI_END
000078 91a5      	LPM  R26,Z+
000079 91b5      	LPM  R27,Z+
00007a 9005      	LPM  R0,Z+
00007b 9015      	LPM  R1,Z+
00007c 01bf      	MOVW R22,R30
00007d 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007e 9005      	LPM  R0,Z+
00007f 920d      	ST   X+,R0
000080 9701      	SBIW R24,1
000081 f7e1      	BRNE __GLOBAL_INI_LOOP
000082 01fb      	MOVW R30,R22
000083 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000084 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000085 bfed      	OUT  SPL,R30
000086 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000087 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000088 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000089 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00008a 940c 008c 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;#include <delay.h>
                 ;
                 ;// I2C Bus functions
                 ;#include <i2c.h>
                 ;
                 ;// PCF8583 Real Time Clock functions
                 ;#include <pcf8583.h>
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;#include <stdio.h>
                 ;#include <string.h>
                 ;
                 ;// crystal frequency - 1MHz
                 ;#define xtal 1000000
                 ;
                 ;#define ddelay 50
                 ;#define alarm PORTD.0
                 ;
                 ;// Declare your global variables here
                 ;int mscounter;
                 ;char lcd_buff[16];
                 ;char alarm_state[4];
                 ;bit bitcheck;
                 ;unsigned char rtchour, rtcmin, rtcsec, rtchsec;
                 ;unsigned char chour, cminute;
                 ;eeprom unsigned char alarmstate;
                 ;eeprom unsigned char alhour, alminute;
                 ;
                 ;// functions
                 ;void loop(void);
                 ;void refresh_lcd(void);
                 ;
                 ;void main(void)
                 ; 0000 0027 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0028 // Declare your local variables here
                 ; 0000 0029 
                 ; 0000 002A // set PORTA as input for LCD - values = 0
                 ; 0000 002B DDRA=0x00;
00008c e0e0      	LDI  R30,LOW(0)
00008d bbea      	OUT  0x1A,R30
                 ; 0000 002C PORTA=0x00;
00008e bbeb      	OUT  0x1B,R30
                 ; 0000 002D 
                 ; 0000 002E // set PORTB as output for buttons - values = 1
                 ; 0000 002F DDRB=0xFF;
00008f efef      	LDI  R30,LOW(255)
000090 bbe7      	OUT  0x17,R30
                 ; 0000 0030 PORTB=0xFF;
000091 bbe8      	OUT  0x18,R30
                 ; 0000 0031 
                 ; 0000 0032 // set PIN0 of PORTD as output - value = 0
                 ; 0000 0033 DDRD.0=1;
000092 9a88      	SBI  0x11,0
                 ; 0000 0034 PORTD.0=0;
000093 9890      	CBI  0x12,0
                 ; 0000 0035 
                 ; 0000 0036 // Timer/Counter 1 initialization
                 ; 0000 0037 // Clock source: System Clock
                 ; 0000 0038 // Clock value: 1000.000 kHz
                 ; 0000 0039 // Mode: Normal top=0xFFFF
                 ; 0000 003A // OC1A output: Disconnected
                 ; 0000 003B // OC1B output: Disconnected
                 ; 0000 003C // Noise Canceler: Off
                 ; 0000 003D // Input Capture on Falling Edge
                 ; 0000 003E // Timer Period: 65.536 ms
                 ; 0000 003F // Timer1 Overflow Interrupt: On
                 ; 0000 0040 // Input Capture Interrupt: Off
                 ; 0000 0041 // Compare A Match Interrupt: Off
                 ; 0000 0042 // Compare B Match Interrupt: Off
                 ; 0000 0043 TCCR1A=0x00;
000094 e0e0      	LDI  R30,LOW(0)
000095 bdef      	OUT  0x2F,R30
                 ; 0000 0044 TCCR1B=0x01;
000096 e0e1      	LDI  R30,LOW(1)
000097 bdee      	OUT  0x2E,R30
                 ; 0000 0045 TCNT1H=0x00;
000098 e0e0      	LDI  R30,LOW(0)
000099 bded      	OUT  0x2D,R30
                 ; 0000 0046 TCNT1L=0x00;
00009a bdec      	OUT  0x2C,R30
                 ; 0000 0047 ICR1H=0x00;
00009b bde7      	OUT  0x27,R30
                 ; 0000 0048 ICR1L=0x00;
00009c bde6      	OUT  0x26,R30
                 ; 0000 0049 OCR1AH=0x00;
00009d bdeb      	OUT  0x2B,R30
                 ; 0000 004A OCR1AL=0x00;
00009e bdea      	OUT  0x2A,R30
                 ; 0000 004B OCR1BH=0x00;
00009f bde9      	OUT  0x29,R30
                 ; 0000 004C OCR1BL=0x00;
0000a0 bde8      	OUT  0x28,R30
                 ; 0000 004D 
                 ; 0000 004E // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 004F TIMSK=0x04;
0000a1 e0e4      	LDI  R30,LOW(4)
0000a2 bfe9      	OUT  0x39,R30
                 ; 0000 0050 
                 ; 0000 0051 // Bit-Banged I2C Bus initialization
                 ; 0000 0052 // I2C Port: PORTC
                 ; 0000 0053 // I2C SDA bit: 1
                 ; 0000 0054 // I2C SCL bit: 0
                 ; 0000 0055 // Bit Rate: 100 kHz
                 ; 0000 0056 // Note: I2C settings are specified in the
                 ; 0000 0057 // Project|Configure|C Compiler|Libraries|I2C menu.
                 ; 0000 0058 i2c_init();
0000a3 940e 05a8 	CALL _i2c_init
                 ; 0000 0059 
                 ; 0000 005A // PCF8583 Real Time Clock initialization
                 ; 0000 005B rtc_init(0,0);
0000a5 e0e0      	LDI  R30,LOW(0)
0000a6 93ea      	ST   -Y,R30
0000a7 e0a0      	LDI  R26,LOW(0)
0000a8 d16c      	RCALL _rtc_init
                 ; 0000 005C 
                 ; 0000 005D 
                 ; 0000 005E lcd_init(16);
0000a9 e1a0      	LDI  R26,LOW(16)
0000aa 940e 0306 	CALL _lcd_init
                 ; 0000 005F lcd_clear();
0000ac 940e 02d2 	CALL _lcd_clear
                 ; 0000 0060 lcd_puts("  Alarm  Clock  ");
                +
0000ae e6a0     +LDI R26 , LOW ( _0x7 + ( 0 ) )
0000af e0b1     +LDI R27 , HIGH ( _0x7 + ( 0 ) )
                 	__POINTW2MN _0x7,0
0000b0 940e 02f5 	CALL _lcd_puts
                 ; 0000 0061 delay_ms(2500);
0000b2 eca4      	LDI  R26,LOW(2500)
0000b3 e0b9      	LDI  R27,HIGH(2500)
0000b4 940e 05f9 	CALL _delay_ms
                 ; 0000 0062 lcd_clear();
0000b6 940e 02d2 	CALL _lcd_clear
                 ; 0000 0063 
                 ; 0000 0064 // Global enable interrupts
                 ; 0000 0065 #asm("sei")
0000b8 9478      	sei
                 ; 0000 0066 
                 ; 0000 0067     if (alarmstate == 255)
0000b9 940e 050c 	CALL SUBOPT_0x0
0000bb 3fef      	CPI  R30,LOW(0xFF)
0000bc f431      	BRNE _0x8
                 ; 0000 0068     {
                 ; 0000 0069         sprintf(alarm_state, "ON ");
0000bd 940e 0511 	CALL SUBOPT_0x1
                +
0000bf e7e9     +LDI R30 , LOW ( 2 * _0x0 + ( 17 ) )
0000c0 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 17 ) )
                 	__POINTW1FN _0x0,17
0000c1 940e 0516 	CALL SUBOPT_0x2
                 ; 0000 006A     }
                 ; 0000 006B     if (alarmstate == 0)
                 _0x8:
0000c3 940e 050c 	CALL SUBOPT_0x0
0000c5 30e0      	CPI  R30,0
0000c6 f431      	BRNE _0x9
                 ; 0000 006C     {
                 ; 0000 006D         sprintf(alarm_state, "OFF");
0000c7 940e 0511 	CALL SUBOPT_0x1
                +
0000c9 e7ed     +LDI R30 , LOW ( 2 * _0x0 + ( 21 ) )
0000ca e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 21 ) )
                 	__POINTW1FN _0x0,21
0000cb 940e 0516 	CALL SUBOPT_0x2
                 ; 0000 006E     }
                 ; 0000 006F     rtc_get_time(0, &rtchour, &rtcmin, &rtcsec, &rtchsec);
                 _0x9:
0000cd 940e 051d 	CALL SUBOPT_0x3
                 ; 0000 0070 
                 ; 0000 0071     loop();
0000cf d001      	RCALL _loop
                 ; 0000 0072 }
                 _0xA:
0000d0 cfff      	RJMP _0xA
                 ; .FEND
                 
                 	.DSEG
                 _0x7:
000160           	.BYTE 0x11
                 ;
                 ;void loop(void)
                 ; 0000 0075 {
                 
                 	.CSEG
                 _loop:
                 ; .FSTART _loop
                 ; 0000 0076     while (1)
                 _0xB:
                 ; 0000 0077     {
                 ; 0000 0078         refresh_lcd();
0000d1 d0a8      	RCALL _refresh_lcd
                 ; 0000 0079         //Check hour button
                 ; 0000 007A         bitcheck = PINB.0;
0000d2 94e8      	CLT
0000d3 99b0      	SBIC 0x16,0
0000d4 9468      	SET
0000d5 940e 052f 	CALL SUBOPT_0x4
                 ; 0000 007B         delay_ms(ddelay);
                 ; 0000 007C         bitcheck = bitcheck | PINB.0;
0000d7 e0e0      	LDI  R30,0
0000d8 99b0      	SBIC 0x16,0
0000d9 e0e1      	LDI  R30,1
0000da 940e 0538 	CALL SUBOPT_0x5
                 ; 0000 007D         if (bitcheck == 0)
0000dc fc21      	SBRC R2,1
0000dd c00c      	RJMP _0xE
                 ; 0000 007E         {
                 ; 0000 007F             chour = rtchour;
0000de 2cb7      	MOV  R11,R7
                 ; 0000 0080             chour ++;
0000df 94b3      	INC  R11
                 ; 0000 0081             if (chour > 23)
0000e0 e1e7      	LDI  R30,LOW(23)
0000e1 15eb      	CP   R30,R11
0000e2 f408      	BRSH _0xF
                 ; 0000 0082             {
                 ; 0000 0083                 chour = 0;
0000e3 24bb      	CLR  R11
                 ; 0000 0084             }
                 ; 0000 0085             rtc_set_time(0,chour,rtcmin,0,0);
                 _0xF:
0000e4 e0e0      	LDI  R30,LOW(0)
0000e5 93ea      	ST   -Y,R30
0000e6 92ba      	ST   -Y,R11
0000e7 926a      	ST   -Y,R6
0000e8 940e 053d 	CALL SUBOPT_0x6
                 ; 0000 0086             rtc_get_time(0, &rtchour, &rtcmin, &rtcsec, &rtchsec);
                 ; 0000 0087         }
                 ; 0000 0088         //Check minute button
                 ; 0000 0089         bitcheck = PINB.1;
                 _0xE:
0000ea 94e8      	CLT
0000eb 99b1      	SBIC 0x16,1
0000ec 9468      	SET
0000ed 940e 052f 	CALL SUBOPT_0x4
                 ; 0000 008A         delay_ms(ddelay);
                 ; 0000 008B         bitcheck = bitcheck | PINB.1;
0000ef e0e0      	LDI  R30,0
0000f0 99b1      	SBIC 0x16,1
0000f1 e0e1      	LDI  R30,1
0000f2 940e 0538 	CALL SUBOPT_0x5
                 ; 0000 008C         if (bitcheck == 0)
0000f4 fc21      	SBRC R2,1
0000f5 c00c      	RJMP _0x10
                 ; 0000 008D         {
                 ; 0000 008E             cminute = rtcmin;
0000f6 2ca6      	MOV  R10,R6
                 ; 0000 008F             cminute ++;
0000f7 94a3      	INC  R10
                 ; 0000 0090             if (cminute > 59)
0000f8 e3eb      	LDI  R30,LOW(59)
0000f9 15ea      	CP   R30,R10
0000fa f408      	BRSH _0x11
                 ; 0000 0091             {
                 ; 0000 0092                 cminute = 0;
0000fb 24aa      	CLR  R10
                 ; 0000 0093             }
                 ; 0000 0094             rtc_set_time(0,rtchour,cminute,0,0);
                 _0x11:
0000fc e0e0      	LDI  R30,LOW(0)
0000fd 93ea      	ST   -Y,R30
0000fe 927a      	ST   -Y,R7
0000ff 92aa      	ST   -Y,R10
000100 940e 053d 	CALL SUBOPT_0x6
                 ; 0000 0095             rtc_get_time(0, &rtchour, &rtcmin, &rtcsec, &rtchsec);
                 ; 0000 0096         }
                 ; 0000 0097         //Check Alarm hour button
                 ; 0000 0098         bitcheck = PINB.2;
                 _0x10:
000102 94e8      	CLT
000103 99b2      	SBIC 0x16,2
000104 9468      	SET
000105 940e 052f 	CALL SUBOPT_0x4
                 ; 0000 0099         delay_ms(ddelay);
                 ; 0000 009A         bitcheck = bitcheck | PINB.2;
000107 e0e0      	LDI  R30,0
000108 99b2      	SBIC 0x16,2
000109 e0e1      	LDI  R30,1
00010a 940e 0538 	CALL SUBOPT_0x5
                 ; 0000 009B         if (bitcheck == 0)
00010c fc21      	SBRC R2,1
00010d c00e      	RJMP _0x12
                 ; 0000 009C         {
                 ; 0000 009D             alhour ++;
00010e 940e 0543 	CALL SUBOPT_0x7
000110 5fef      	SUBI R30,-LOW(1)
000111 940e 0624 	CALL __EEPROMWRB
                 ; 0000 009E             if (alhour > 23)
000113 940e 0543 	CALL SUBOPT_0x7
000115 31e8      	CPI  R30,LOW(0x18)
000116 f028      	BRLO _0x13
                 ; 0000 009F                 alhour = 0;
000117 e0a1      	LDI  R26,LOW(_alhour)
000118 e0b0      	LDI  R27,HIGH(_alhour)
000119 e0e0      	LDI  R30,LOW(0)
00011a 940e 0624 	CALL __EEPROMWRB
                 ; 0000 00A0         }
                 _0x13:
                 ; 0000 00A1         //Check Alarm minute button
                 ; 0000 00A2         bitcheck = PINB.3;
                 _0x12:
00011c 94e8      	CLT
00011d 99b3      	SBIC 0x16,3
00011e 9468      	SET
00011f 940e 052f 	CALL SUBOPT_0x4
                 ; 0000 00A3         delay_ms(ddelay);
                 ; 0000 00A4         bitcheck = bitcheck | PINB.3;
000121 e0e0      	LDI  R30,0
000122 99b3      	SBIC 0x16,3
000123 e0e1      	LDI  R30,1
000124 940e 0538 	CALL SUBOPT_0x5
                 ; 0000 00A5         if (bitcheck == 0)
000126 fc21      	SBRC R2,1
000127 c00e      	RJMP _0x14
                 ; 0000 00A6         {
                 ; 0000 00A7             alminute ++;
000128 940e 0548 	CALL SUBOPT_0x8
00012a 5fef      	SUBI R30,-LOW(1)
00012b 940e 0624 	CALL __EEPROMWRB
                 ; 0000 00A8             if (alminute > 59)
00012d 940e 0548 	CALL SUBOPT_0x8
00012f 33ec      	CPI  R30,LOW(0x3C)
000130 f028      	BRLO _0x15
                 ; 0000 00A9                 alminute = 0;
000131 e0a2      	LDI  R26,LOW(_alminute)
000132 e0b0      	LDI  R27,HIGH(_alminute)
000133 e0e0      	LDI  R30,LOW(0)
000134 940e 0624 	CALL __EEPROMWRB
                 ; 0000 00AA         }
                 _0x15:
                 ; 0000 00AB         //Check Alarm state
                 ; 0000 00AC         bitcheck = PINB.4;
                 _0x14:
000136 94e8      	CLT
000137 99b4      	SBIC 0x16,4
000138 9468      	SET
000139 940e 052f 	CALL SUBOPT_0x4
                 ; 0000 00AD         delay_ms(ddelay);
                 ; 0000 00AE         bitcheck = bitcheck | PINB.4;
00013b e0e0      	LDI  R30,0
00013c 99b4      	SBIC 0x16,4
00013d e0e1      	LDI  R30,1
00013e 940e 0538 	CALL SUBOPT_0x5
                 ; 0000 00AF         if (bitcheck == 0)
000140 fc21      	SBRC R2,1
000141 c021      	RJMP _0x16
                 ; 0000 00B0         {
                 ; 0000 00B1             if (alarmstate == 0)
000142 940e 050c 	CALL SUBOPT_0x0
000144 30e0      	CPI  R30,0
000145 f451      	BRNE _0x17
                 ; 0000 00B2             {
                 ; 0000 00B3                 alarmstate = 255;
000146 e0a0      	LDI  R26,LOW(_alarmstate)
000147 e0b0      	LDI  R27,HIGH(_alarmstate)
000148 efef      	LDI  R30,LOW(255)
000149 940e 0624 	CALL __EEPROMWRB
                 ; 0000 00B4                 sprintf(alarm_state, "ON ");
00014b 940e 0511 	CALL SUBOPT_0x1
                +
00014d e7e9     +LDI R30 , LOW ( 2 * _0x0 + ( 17 ) )
00014e e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 17 ) )
                 	__POINTW1FN _0x0,17
00014f c00d      	RJMP _0x26
                 ; 0000 00B5             }
                 ; 0000 00B6             else if (alarmstate == 255)
                 _0x17:
000150 940e 050c 	CALL SUBOPT_0x0
000152 3fef      	CPI  R30,LOW(0xFF)
000153 f479      	BRNE _0x19
                 ; 0000 00B7             {
                 ; 0000 00B8                 alarmstate = 0;
000154 e0a0      	LDI  R26,LOW(_alarmstate)
000155 e0b0      	LDI  R27,HIGH(_alarmstate)
000156 e0e0      	LDI  R30,LOW(0)
000157 940e 0624 	CALL __EEPROMWRB
                 ; 0000 00B9                 sprintf(alarm_state, "OFF");
000159 940e 0511 	CALL SUBOPT_0x1
                +
00015b e7ed     +LDI R30 , LOW ( 2 * _0x0 + ( 21 ) )
00015c e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 21 ) )
                 	__POINTW1FN _0x0,21
                 _0x26:
00015d 93fa      	ST   -Y,R31
00015e 93ea      	ST   -Y,R30
00015f e080      	LDI  R24,0
000160 940e 04a8 	CALL _sprintf
000162 9624      	ADIW R28,4
                 ; 0000 00BA             }
                 ; 0000 00BB         }
                 _0x19:
                 ; 0000 00BC         //alarm
                 ; 0000 00BD         if (alhour == rtchour && alminute == rtcmin)
                 _0x16:
000163 940e 0543 	CALL SUBOPT_0x7
000165 167e      	CP   R7,R30
000166 f421      	BRNE _0x1B
000167 940e 0548 	CALL SUBOPT_0x8
000169 166e      	CP   R6,R30
00016a f009      	BREQ _0x1C
                 _0x1B:
00016b c005      	RJMP _0x1A
                 _0x1C:
                 ; 0000 00BE         {
                 ; 0000 00BF             if (alarmstate == 255)
00016c 940e 050c 	CALL SUBOPT_0x0
00016e 3fef      	CPI  R30,LOW(0xFF)
00016f f409      	BRNE _0x1D
                 ; 0000 00C0             {
                 ; 0000 00C1                 alarm = 1;
000170 9a90      	SBI  0x12,0
                 ; 0000 00C2             }
                 ; 0000 00C3         }
                 _0x1D:
                 ; 0000 00C4         //
                 ; 0000 00C5         if (alarm == 1 && alarmstate == 0)
                 _0x1A:
000171 9b90      	SBIS 0x12,0
000172 c004      	RJMP _0x21
000173 940e 050c 	CALL SUBOPT_0x0
000175 30e0      	CPI  R30,0
000176 f009      	BREQ _0x22
                 _0x21:
000177 c001      	RJMP _0x20
                 _0x22:
                 ; 0000 00C6         {
                 ; 0000 00C7             alarm = 0;
000178 9890      	CBI  0x12,0
                 ; 0000 00C8         }
                 ; 0000 00C9 
                 ; 0000 00CA     }
                 _0x20:
000179 cf57      	RJMP _0xB
                 ; 0000 00CB }
                 ; .FEND
                 ;
                 ;void refresh_lcd(void)
                 ; 0000 00CE {
                 _refresh_lcd:
                 ; .FSTART _refresh_lcd
                 ; 0000 00CF     // display the time on the LCD
                 ; 0000 00D0     sprintf(lcd_buff,"Time: %2d:%02d:%02d",rtchour, rtcmin, rtcsec);
00017a e7e2      	LDI  R30,LOW(_lcd_buff)
00017b e0f1      	LDI  R31,HIGH(_lcd_buff)
00017c 93fa      	ST   -Y,R31
00017d 93ea      	ST   -Y,R30
                +
00017e e8e1     +LDI R30 , LOW ( 2 * _0x0 + ( 25 ) )
00017f e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 25 ) )
                 	__POINTW1FN _0x0,25
000180 93fa      	ST   -Y,R31
000181 93ea      	ST   -Y,R30
000182 2de7      	MOV  R30,R7
000183 940e 054d 	CALL SUBOPT_0x9
000185 2de6      	MOV  R30,R6
000186 940e 054d 	CALL SUBOPT_0x9
000188 2de9      	MOV  R30,R9
000189 940e 054d 	CALL SUBOPT_0x9
00018b e08c      	LDI  R24,12
00018c 940e 04a8 	CALL _sprintf
00018e 9660      	ADIW R28,16
                 ; 0000 00D1     lcd_clear();
00018f d142      	RCALL _lcd_clear
                 ; 0000 00D2     lcd_gotoxy(0, 0);
000190 e0e0      	LDI  R30,LOW(0)
000191 93ea      	ST   -Y,R30
000192 e0a0      	LDI  R26,LOW(0)
000193 940e 0553 	CALL SUBOPT_0xA
                 ; 0000 00D3     lcd_puts(lcd_buff);
                 ; 0000 00D4     sprintf(lcd_buff,"Alrm: %2d:%02d %s", alhour, alminute, alarm_state);
000195 e7e2      	LDI  R30,LOW(_lcd_buff)
000196 e0f1      	LDI  R31,HIGH(_lcd_buff)
000197 93fa      	ST   -Y,R31
000198 93ea      	ST   -Y,R30
                +
000199 e9e5     +LDI R30 , LOW ( 2 * _0x0 + ( 45 ) )
00019a e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 45 ) )
                 	__POINTW1FN _0x0,45
00019b 93fa      	ST   -Y,R31
00019c 93ea      	ST   -Y,R30
00019d 940e 0543 	CALL SUBOPT_0x7
00019f 940e 054d 	CALL SUBOPT_0x9
0001a1 940e 0548 	CALL SUBOPT_0x8
0001a3 940e 054d 	CALL SUBOPT_0x9
0001a5 e8e2      	LDI  R30,LOW(_alarm_state)
0001a6 e0f1      	LDI  R31,HIGH(_alarm_state)
0001a7 2766      	CLR  R22
0001a8 2777      	CLR  R23
0001a9 940e 0613 	CALL __PUTPARD1
0001ab e08c      	LDI  R24,12
0001ac 940e 04a8 	CALL _sprintf
0001ae 9660      	ADIW R28,16
                 ; 0000 00D5     lcd_gotoxy(0, 1);
0001af e0e0      	LDI  R30,LOW(0)
0001b0 93ea      	ST   -Y,R30
0001b1 e0a1      	LDI  R26,LOW(1)
0001b2 940e 0553 	CALL SUBOPT_0xA
                 ; 0000 00D6     lcd_puts(lcd_buff);
                 ; 0000 00D7 }
0001b4 9508      	RET
                 ; .FEND
                 ;
                 ;// Timer1 overflow interrupt service routine
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 00DB {
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
0001b5 920a      	ST   -Y,R0
0001b6 921a      	ST   -Y,R1
0001b7 92fa      	ST   -Y,R15
0001b8 936a      	ST   -Y,R22
0001b9 937a      	ST   -Y,R23
0001ba 938a      	ST   -Y,R24
0001bb 939a      	ST   -Y,R25
0001bc 93aa      	ST   -Y,R26
0001bd 93ba      	ST   -Y,R27
0001be 93ea      	ST   -Y,R30
0001bf 93fa      	ST   -Y,R31
0001c0 b7ef      	IN   R30,SREG
0001c1 93ea      	ST   -Y,R30
                 ; 0000 00DC     mscounter ++;
0001c2 01f2      	MOVW R30,R4
0001c3 9631      	ADIW R30,1
0001c4 012f      	MOVW R4,R30
                 ; 0000 00DD     if (mscounter == 15)
0001c5 e0ef      	LDI  R30,LOW(15)
0001c6 e0f0      	LDI  R31,HIGH(15)
0001c7 15e4      	CP   R30,R4
0001c8 05f5      	CPC  R31,R5
0001c9 f421      	BRNE _0x25
                 ; 0000 00DE     {
                 ; 0000 00DF         //initial
                 ; 0000 00E0         mscounter = 0;
0001ca 2444      	CLR  R4
0001cb 2455      	CLR  R5
                 ; 0000 00E1         // read the time from the RTC 0
                 ; 0000 00E2         rtc_get_time(0, &rtchour, &rtcmin, &rtcsec, &rtchsec);
0001cc 940e 051d 	CALL SUBOPT_0x3
                 ; 0000 00E3     }
                 ; 0000 00E4 }
                 _0x25:
0001ce 91e9      	LD   R30,Y+
0001cf bfef      	OUT  SREG,R30
0001d0 91f9      	LD   R31,Y+
0001d1 91e9      	LD   R30,Y+
0001d2 91b9      	LD   R27,Y+
0001d3 91a9      	LD   R26,Y+
0001d4 9199      	LD   R25,Y+
0001d5 9189      	LD   R24,Y+
0001d6 9179      	LD   R23,Y+
0001d7 9169      	LD   R22,Y+
0001d8 90f9      	LD   R15,Y+
0001d9 9019      	LD   R1,Y+
0001da 9009      	LD   R0,Y+
0001db 9518      	RETI
                 ; .FEND
                 
                 	.CSEG
                 _rtc_read:
                 ; .FSTART _rtc_read
0001dc 93aa      	ST   -Y,R26
0001dd 931a      	ST   -Y,R17
0001de 81ea      	LDD  R30,Y+2
0001df 0fee      	LSL  R30
0001e0 6ae0      	ORI  R30,LOW(0xA0)
0001e1 2f1e      	MOV  R17,R30
0001e2 940e 05ad 	CALL _i2c_start
0001e4 2fa1      	MOV  R26,R17
0001e5 940e 05e1 	CALL _i2c_write
0001e7 81a9      	LDD  R26,Y+1
0001e8 940e 05e1 	CALL _i2c_write
0001ea 940e 05ad 	CALL _i2c_start
0001ec 2fe1      	MOV  R30,R17
0001ed 60e1      	ORI  R30,1
0001ee 2fae      	MOV  R26,R30
0001ef 940e 05e1 	CALL _i2c_write
0001f1 e0a0      	LDI  R26,LOW(0)
0001f2 940e 05c6 	CALL _i2c_read
0001f4 2f1e      	MOV  R17,R30
0001f5 940e 05bc 	CALL _i2c_stop
0001f7 2fe1      	MOV  R30,R17
0001f8 c10a      	RJMP _0x20C0005
                 ; .FEND
                 _rtc_write:
                 ; .FSTART _rtc_write
0001f9 93aa      	ST   -Y,R26
0001fa 940e 05ad 	CALL _i2c_start
0001fc 81ea      	LDD  R30,Y+2
0001fd 0fee      	LSL  R30
0001fe 6ae0      	ORI  R30,LOW(0xA0)
0001ff 2fae      	MOV  R26,R30
000200 940e 05e1 	CALL _i2c_write
000202 81a9      	LDD  R26,Y+1
000203 940e 05e1 	CALL _i2c_write
000205 81a8      	LD   R26,Y
000206 940e 05e1 	CALL _i2c_write
000208 940e 05bc 	CALL _i2c_stop
00020a c0f9      	RJMP _0x20C0004
                 ; .FEND
                 _rtc_get_status:
                 ; .FSTART _rtc_get_status
00020b 93aa      	ST   -Y,R26
00020c 81e8      	LD   R30,Y
00020d 93ea      	ST   -Y,R30
00020e e0a0      	LDI  R26,LOW(0)
00020f dfcc      	RCALL _rtc_read
000210 93e0 0171 	STS  _rtc_status,R30
000212 fbe1      	BST  R30,1
000213 f820      	BLD  R2,0
000214 c11d      	RJMP _0x20C0003
                 ; .FEND
                 _rtc_init:
                 ; .FSTART _rtc_init
000215 93aa      	ST   -Y,R26
000216 931a      	ST   -Y,R17
000217 e910      	LDI  R17,LOW(144)
000218 81e9      	LDD  R30,Y+1
000219 30e0      	CPI  R30,0
00021a f009      	BREQ _0x2000003
00021b eb10      	LDI  R17,LOW(176)
                 _0x2000003:
00021c e0e0      	LDI  R30,LOW(0)
00021d 93e0 0171 	STS  _rtc_status,R30
00021f 94e8      	CLT
000220 f820      	BLD  R2,0
000221 81ea      	LDD  R30,Y+2
000222 93ea      	ST   -Y,R30
000223 e0e0      	LDI  R30,LOW(0)
000224 93ea      	ST   -Y,R30
000225 e0a0      	LDI  R26,LOW(0)
000226 dfd2      	RCALL _rtc_write
000227 81ea      	LDD  R30,Y+2
000228 93ea      	ST   -Y,R30
000229 e0e4      	LDI  R30,LOW(4)
00022a 93ea      	ST   -Y,R30
00022b 81ec      	LDD  R30,Y+4
00022c 93ea      	ST   -Y,R30
00022d e0a4      	LDI  R26,LOW(4)
00022e dfad      	RCALL _rtc_read
00022f 73ef      	ANDI R30,LOW(0x3F)
000230 2fae      	MOV  R26,R30
000231 dfc7      	RCALL _rtc_write
000232 81ea      	LDD  R30,Y+2
000233 93ea      	ST   -Y,R30
000234 e0e8      	LDI  R30,LOW(8)
000235 93ea      	ST   -Y,R30
000236 2fa1      	MOV  R26,R17
000237 dfc1      	RCALL _rtc_write
000238 c0ca      	RJMP _0x20C0005
                 ; .FEND
                 _rtc_stop:
                 ; .FSTART _rtc_stop
000239 940e 0559 	CALL SUBOPT_0xB
00023b 68e0      	ORI  R30,0x80
00023c 940e 0560 	CALL SUBOPT_0xC
00023e c0f3      	RJMP _0x20C0003
                 ; .FEND
                 _rtc_start:
                 ; .FSTART _rtc_start
00023f 940e 0559 	CALL SUBOPT_0xB
000241 77ef      	ANDI R30,0x7F
000242 940e 0560 	CALL SUBOPT_0xC
000244 c0ed      	RJMP _0x20C0003
                 ; .FEND
                 _rtc_hold_off:
                 ; .FSTART _rtc_hold_off
000245 940e 0559 	CALL SUBOPT_0xB
000247 7bef      	ANDI R30,0xBF
000248 940e 0560 	CALL SUBOPT_0xC
00024a c0e7      	RJMP _0x20C0003
                 ; .FEND
                 _rtc_hold_on:
                 ; .FSTART _rtc_hold_on
00024b 940e 0559 	CALL SUBOPT_0xB
00024d 64e0      	ORI  R30,0x40
00024e 940e 0560 	CALL SUBOPT_0xC
000250 c0e1      	RJMP _0x20C0003
                 ; .FEND
                 _rtc_read_bcd:
                 ; .FSTART _rtc_read_bcd
000251 93aa      	ST   -Y,R26
000252 81e9      	LDD  R30,Y+1
000253 93ea      	ST   -Y,R30
000254 81a9      	LDD  R26,Y+1
000255 df86      	RCALL _rtc_read
000256 2fae      	MOV  R26,R30
000257 940e 04f5 	CALL _bcd2bin
000259 c076      	RJMP _0x20C0006
                 ; .FEND
                 _rtc_write_bcd:
                 ; .FSTART _rtc_write_bcd
00025a 93aa      	ST   -Y,R26
00025b 81ea      	LDD  R30,Y+2
00025c 93ea      	ST   -Y,R30
00025d 81ea      	LDD  R30,Y+2
00025e 93ea      	ST   -Y,R30
00025f 81aa      	LDD  R26,Y+2
000260 940e 0502 	CALL _bin2bcd
000262 2fae      	MOV  R26,R30
000263 df95      	RCALL _rtc_write
000264 c09f      	RJMP _0x20C0004
                 ; .FEND
                 _rtc_get_time:
                 ; .FSTART _rtc_get_time
000265 93ba      	ST   -Y,R27
000266 93aa      	ST   -Y,R26
000267 85a8      	LDD  R26,Y+8
000268 dfe2      	RCALL _rtc_hold_on
000269 85e8      	LDD  R30,Y+8
00026a 93ea      	ST   -Y,R30
00026b e0a1      	LDI  R26,LOW(1)
00026c dfe4      	RCALL _rtc_read_bcd
00026d 81a8      	LD   R26,Y
00026e 81b9      	LDD  R27,Y+1
00026f 93ec      	ST   X,R30
000270 85e8      	LDD  R30,Y+8
000271 93ea      	ST   -Y,R30
000272 e0a2      	LDI  R26,LOW(2)
000273 dfdd      	RCALL _rtc_read_bcd
000274 81aa      	LDD  R26,Y+2
000275 81bb      	LDD  R27,Y+2+1
000276 93ec      	ST   X,R30
000277 85e8      	LDD  R30,Y+8
000278 93ea      	ST   -Y,R30
000279 e0a3      	LDI  R26,LOW(3)
00027a dfd6      	RCALL _rtc_read_bcd
00027b 81ac      	LDD  R26,Y+4
00027c 81bd      	LDD  R27,Y+4+1
00027d 93ec      	ST   X,R30
00027e 85e8      	LDD  R30,Y+8
00027f 93ea      	ST   -Y,R30
000280 e0a4      	LDI  R26,LOW(4)
000281 dfcf      	RCALL _rtc_read_bcd
000282 81ae      	LDD  R26,Y+6
000283 81bf      	LDD  R27,Y+6+1
000284 93ec      	ST   X,R30
000285 85a8      	LDD  R26,Y+8
000286 dfbe      	RCALL _rtc_hold_off
000287 9629      	ADIW R28,9
000288 9508      	RET
                 ; .FEND
                 _rtc_set_time:
                 ; .FSTART _rtc_set_time
000289 93aa      	ST   -Y,R26
00028a 81ac      	LDD  R26,Y+4
00028b dfad      	RCALL _rtc_stop
00028c 81ec      	LDD  R30,Y+4
00028d 93ea      	ST   -Y,R30
00028e e0e1      	LDI  R30,LOW(1)
00028f 93ea      	ST   -Y,R30
000290 81aa      	LDD  R26,Y+2
000291 940e 056a 	CALL SUBOPT_0xD
000293 e0e2      	LDI  R30,LOW(2)
000294 93ea      	ST   -Y,R30
000295 81ab      	LDD  R26,Y+3
000296 940e 056a 	CALL SUBOPT_0xD
000298 e0e3      	LDI  R30,LOW(3)
000299 93ea      	ST   -Y,R30
00029a 81ac      	LDD  R26,Y+4
00029b 940e 056a 	CALL SUBOPT_0xD
00029d e0e4      	LDI  R30,LOW(4)
00029e 93ea      	ST   -Y,R30
00029f 81ad      	LDD  R26,Y+5
0002a0 dfb9      	RCALL _rtc_write_bcd
0002a1 81ac      	LDD  R26,Y+4
0002a2 df9c      	RCALL _rtc_start
0002a3 940c 0372 	JMP  _0x20C0002
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
0002a5 93aa      	ST   -Y,R26
0002a6 b3eb      	IN   R30,0x1B
0002a7 70ef      	ANDI R30,LOW(0xF)
0002a8 2fae      	MOV  R26,R30
0002a9 81e8      	LD   R30,Y
0002aa 7fe0      	ANDI R30,LOW(0xF0)
0002ab 2bea      	OR   R30,R26
0002ac bbeb      	OUT  0x1B,R30
                +
0002ad e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0002ae 958a     +DEC R24
0002af f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0002b0 9ada      	SBI  0x1B,2
                +
0002b1 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0002b2 958a     +DEC R24
0002b3 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0002b4 98da      	CBI  0x1B,2
                +
0002b5 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0002b6 958a     +DEC R24
0002b7 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0002b8 c079      	RJMP _0x20C0003
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0002b9 93aa      	ST   -Y,R26
0002ba 81a8      	LD   R26,Y
0002bb dfe9      	RCALL __lcd_write_nibble_G101
0002bc 81e8          ld    r30,y
0002bd 95e2          swap  r30
0002be 83e8          st    y,r30
0002bf 81a8      	LD   R26,Y
0002c0 dfe4      	RCALL __lcd_write_nibble_G101
                +
0002c1 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
0002c2 958a     +DEC R24
0002c3 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
0002c4 c06d      	RJMP _0x20C0003
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0002c5 93aa      	ST   -Y,R26
0002c6 81e8      	LD   R30,Y
0002c7 e0f0      	LDI  R31,0
0002c8 57ea      	SUBI R30,LOW(-__base_y_G101)
0002c9 4ffe      	SBCI R31,HIGH(-__base_y_G101)
0002ca 81e0      	LD   R30,Z
0002cb 81a9      	LDD  R26,Y+1
0002cc 0fae      	ADD  R26,R30
0002cd dfeb      	RCALL __lcd_write_data
0002ce 80d9      	LDD  R13,Y+1
0002cf 80c8      	LDD  R12,Y+0
                 _0x20C0006:
0002d0 9622      	ADIW R28,2
0002d1 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0002d2 e0a2      	LDI  R26,LOW(2)
0002d3 940e 056f 	CALL SUBOPT_0xE
0002d5 e0ac      	LDI  R26,LOW(12)
0002d6 dfe2      	RCALL __lcd_write_data
0002d7 e0a1      	LDI  R26,LOW(1)
0002d8 940e 056f 	CALL SUBOPT_0xE
0002da e0e0      	LDI  R30,LOW(0)
0002db 2ece      	MOV  R12,R30
0002dc 2ede      	MOV  R13,R30
0002dd 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0002de 93aa      	ST   -Y,R26
0002df 81a8      	LD   R26,Y
0002e0 30aa      	CPI  R26,LOW(0xA)
0002e1 f021      	BREQ _0x2020005
0002e2 91e0 018a 	LDS  R30,__lcd_maxx
0002e4 16de      	CP   R13,R30
0002e5 f048      	BRLO _0x2020004
                 _0x2020005:
0002e6 e0e0      	LDI  R30,LOW(0)
0002e7 93ea      	ST   -Y,R30
0002e8 94c3      	INC  R12
0002e9 2dac      	MOV  R26,R12
0002ea dfda      	RCALL _lcd_gotoxy
0002eb 81a8      	LD   R26,Y
0002ec 30aa      	CPI  R26,LOW(0xA)
0002ed f409      	BRNE _0x2020007
0002ee c043      	RJMP _0x20C0003
                 _0x2020007:
                 _0x2020004:
0002ef 94d3      	INC  R13
0002f0 9ad8      	SBI  0x1B,0
0002f1 81a8      	LD   R26,Y
0002f2 dfc6      	RCALL __lcd_write_data
0002f3 98d8      	CBI  0x1B,0
0002f4 c03d      	RJMP _0x20C0003
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0002f5 93ba      	ST   -Y,R27
0002f6 93aa      	ST   -Y,R26
0002f7 931a      	ST   -Y,R17
                 _0x2020008:
0002f8 81a9      	LDD  R26,Y+1
0002f9 81ba      	LDD  R27,Y+1+1
0002fa 91ed      	LD   R30,X+
0002fb 83a9      	STD  Y+1,R26
0002fc 83ba      	STD  Y+1+1,R27
0002fd 2f1e      	MOV  R17,R30
0002fe 30e0      	CPI  R30,0
0002ff f019      	BREQ _0x202000A
000300 2fa1      	MOV  R26,R17
000301 dfdc      	RCALL _lcd_putchar
000302 cff5      	RJMP _0x2020008
                 _0x202000A:
                 _0x20C0005:
000303 8118      	LDD  R17,Y+0
                 _0x20C0004:
000304 9623      	ADIW R28,3
000305 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000306 93aa      	ST   -Y,R26
000307 b3ea      	IN   R30,0x1A
000308 6fe0      	ORI  R30,LOW(0xF0)
000309 bbea      	OUT  0x1A,R30
00030a 9ad2      	SBI  0x1A,2
00030b 9ad0      	SBI  0x1A,0
00030c 9ad1      	SBI  0x1A,1
00030d 98da      	CBI  0x1B,2
00030e 98d8      	CBI  0x1B,0
00030f 98d9      	CBI  0x1B,1
000310 81e8      	LD   R30,Y
000311 93e0 018a 	STS  __lcd_maxx,R30
000313 58e0      	SUBI R30,-LOW(128)
                +
000314 93e0 0188+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
000316 81e8      	LD   R30,Y
000317 54e0      	SUBI R30,-LOW(192)
                +
000318 93e0 0189+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
00031a e1a4      	LDI  R26,LOW(20)
00031b e0b0      	LDI  R27,0
00031c 940e 05f9 	CALL _delay_ms
00031e 940e 0575 	CALL SUBOPT_0xF
000320 940e 0575 	CALL SUBOPT_0xF
000322 940e 0575 	CALL SUBOPT_0xF
000324 e2a0      	LDI  R26,LOW(32)
000325 df7f      	RCALL __lcd_write_nibble_G101
                +
000326 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000327 958a     +DEC R24
000328 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000329 e2a8      	LDI  R26,LOW(40)
00032a df8e      	RCALL __lcd_write_data
00032b e0a4      	LDI  R26,LOW(4)
00032c df8c      	RCALL __lcd_write_data
00032d e8a5      	LDI  R26,LOW(133)
00032e df8a      	RCALL __lcd_write_data
00032f e0a6      	LDI  R26,LOW(6)
000330 df88      	RCALL __lcd_write_data
000331 dfa0      	RCALL _lcd_clear
                 _0x20C0003:
000332 9621      	ADIW R28,1
000333 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G102:
                 ; .FSTART _put_buff_G102
000334 93ba      	ST   -Y,R27
000335 93aa      	ST   -Y,R26
000336 931a      	ST   -Y,R17
000337 930a      	ST   -Y,R16
000338 81aa      	LDD  R26,Y+2
000339 81bb      	LDD  R27,Y+2+1
00033a 9612      	ADIW R26,2
00033b 940e 060b 	CALL __GETW1P
00033d 9730      	SBIW R30,0
00033e f159      	BREQ _0x2040010
00033f 81aa      	LDD  R26,Y+2
000340 81bb      	LDD  R27,Y+2+1
000341 9614      	ADIW R26,4
000342 940e 060b 	CALL __GETW1P
000344 018f      	MOVW R16,R30
000345 9730      	SBIW R30,0
000346 f061      	BREQ _0x2040012
                +
000347 3002     +CPI R16 , LOW ( 2 )
000348 e0e0     +LDI R30 , HIGH ( 2 )
000349 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00034a f098      	BRLO _0x2040013
00034b 01f8      	MOVW R30,R16
00034c 9731      	SBIW R30,1
00034d 018f      	MOVW R16,R30
                +
00034e 81aa     +LDD R26 , Y + 2
00034f 81bb     +LDD R27 , Y + 2 + 1
000350 9614     +ADIW R26 , 4
000351 93ed     +ST X + , R30
000352 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2040012:
000353 81aa      	LDD  R26,Y+2
000354 81bb      	LDD  R27,Y+2+1
000355 9612      	ADIW R26,2
000356 91ed      	LD   R30,X+
000357 91fd      	LD   R31,X+
000358 9631      	ADIW R30,1
000359 93fe      	ST   -X,R31
00035a 93ee      	ST   -X,R30
00035b 9731      	SBIW R30,1
00035c 81ac      	LDD  R26,Y+4
00035d 83a0      	STD  Z+0,R26
                 _0x2040013:
00035e 81aa      	LDD  R26,Y+2
00035f 81bb      	LDD  R27,Y+2+1
000360 940e 060b 	CALL __GETW1P
000362 23ff      	TST  R31
000363 f02a      	BRMI _0x2040014
000364 91ed      	LD   R30,X+
000365 91fd      	LD   R31,X+
000366 9631      	ADIW R30,1
000367 93fe      	ST   -X,R31
000368 93ee      	ST   -X,R30
                 _0x2040014:
000369 c006      	RJMP _0x2040015
                 _0x2040010:
00036a 81aa      	LDD  R26,Y+2
00036b 81bb      	LDD  R27,Y+2+1
00036c efef      	LDI  R30,LOW(65535)
00036d efff      	LDI  R31,HIGH(65535)
00036e 93ed      	ST   X+,R30
00036f 93fc      	ST   X,R31
                 _0x2040015:
000370 8119      	LDD  R17,Y+1
000371 8108      	LDD  R16,Y+0
                 _0x20C0002:
000372 9625      	ADIW R28,5
000373 9508      	RET
                 ; .FEND
                 __print_G102:
                 ; .FSTART __print_G102
000374 93ba      	ST   -Y,R27
000375 93aa      	ST   -Y,R26
000376 9726      	SBIW R28,6
000377 940e 063a 	CALL __SAVELOCR6
000379 e010      	LDI  R17,0
00037a 85ac      	LDD  R26,Y+12
00037b 85bd      	LDD  R27,Y+12+1
00037c e0e0      	LDI  R30,LOW(0)
00037d e0f0      	LDI  R31,HIGH(0)
00037e 93ed      	ST   X+,R30
00037f 93fc      	ST   X,R31
                 _0x2040016:
000380 89ea      	LDD  R30,Y+18
000381 89fb      	LDD  R31,Y+18+1
000382 9631      	ADIW R30,1
000383 8bea      	STD  Y+18,R30
000384 8bfb      	STD  Y+18+1,R31
000385 9731      	SBIW R30,1
000386 91e4      	LPM  R30,Z
000387 2f2e      	MOV  R18,R30
000388 30e0      	CPI  R30,0
000389 f409      	BRNE PC+2
00038a c115      	RJMP _0x2040018
00038b 2fe1      	MOV  R30,R17
00038c 30e0      	CPI  R30,0
00038d f439      	BRNE _0x204001C
00038e 3225      	CPI  R18,37
00038f f411      	BRNE _0x204001D
000390 e011      	LDI  R17,LOW(1)
000391 c002      	RJMP _0x204001E
                 _0x204001D:
000392 940e 057c 	CALL SUBOPT_0x10
                 _0x204001E:
000394 c10a      	RJMP _0x204001B
                 _0x204001C:
000395 30e1      	CPI  R30,LOW(0x1)
000396 f4a9      	BRNE _0x204001F
000397 3225      	CPI  R18,37
000398 f419      	BRNE _0x2040020
000399 940e 057c 	CALL SUBOPT_0x10
00039b c102      	RJMP _0x20400CC
                 _0x2040020:
00039c e012      	LDI  R17,LOW(2)
00039d e040      	LDI  R20,LOW(0)
00039e e000      	LDI  R16,LOW(0)
00039f 322d      	CPI  R18,45
0003a0 f411      	BRNE _0x2040021
0003a1 e001      	LDI  R16,LOW(1)
0003a2 c0fc      	RJMP _0x204001B
                 _0x2040021:
0003a3 322b      	CPI  R18,43
0003a4 f411      	BRNE _0x2040022
0003a5 e24b      	LDI  R20,LOW(43)
0003a6 c0f8      	RJMP _0x204001B
                 _0x2040022:
0003a7 3220      	CPI  R18,32
0003a8 f411      	BRNE _0x2040023
0003a9 e240      	LDI  R20,LOW(32)
0003aa c0f4      	RJMP _0x204001B
                 _0x2040023:
0003ab c002      	RJMP _0x2040024
                 _0x204001F:
0003ac 30e2      	CPI  R30,LOW(0x2)
0003ad f439      	BRNE _0x2040025
                 _0x2040024:
0003ae e050      	LDI  R21,LOW(0)
0003af e013      	LDI  R17,LOW(3)
0003b0 3320      	CPI  R18,48
0003b1 f411      	BRNE _0x2040026
0003b2 6800      	ORI  R16,LOW(128)
0003b3 c0eb      	RJMP _0x204001B
                 _0x2040026:
0003b4 c003      	RJMP _0x2040027
                 _0x2040025:
0003b5 30e3      	CPI  R30,LOW(0x3)
0003b6 f009      	BREQ PC+2
0003b7 c0e7      	RJMP _0x204001B
                 _0x2040027:
0003b8 3320      	CPI  R18,48
0003b9 f010      	BRLO _0x204002A
0003ba 332a      	CPI  R18,58
0003bb f008      	BRLO _0x204002B
                 _0x204002A:
0003bc c007      	RJMP _0x2040029
                 _0x204002B:
0003bd e0aa      	LDI  R26,LOW(10)
0003be 9f5a      	MUL  R21,R26
0003bf 2d50      	MOV  R21,R0
0003c0 2fe2      	MOV  R30,R18
0003c1 53e0      	SUBI R30,LOW(48)
0003c2 0f5e      	ADD  R21,R30
0003c3 c0db      	RJMP _0x204001B
                 _0x2040029:
0003c4 2fe2      	MOV  R30,R18
0003c5 36e3      	CPI  R30,LOW(0x63)
0003c6 f449      	BRNE _0x204002F
0003c7 940e 0583 	CALL SUBOPT_0x11
0003c9 89e8      	LDD  R30,Y+16
0003ca 89f9      	LDD  R31,Y+16+1
0003cb 81a4      	LDD  R26,Z+4
0003cc 93aa      	ST   -Y,R26
0003cd 940e 0589 	CALL SUBOPT_0x12
0003cf c0ce      	RJMP _0x2040030
                 _0x204002F:
0003d0 37e3      	CPI  R30,LOW(0x73)
0003d1 f441      	BRNE _0x2040032
0003d2 940e 0583 	CALL SUBOPT_0x11
0003d4 940e 058f 	CALL SUBOPT_0x13
0003d6 940e 04dc 	CALL _strlen
0003d8 2f1e      	MOV  R17,R30
0003d9 c00a      	RJMP _0x2040033
                 _0x2040032:
0003da 37e0      	CPI  R30,LOW(0x70)
0003db f461      	BRNE _0x2040035
0003dc 940e 0583 	CALL SUBOPT_0x11
0003de 940e 058f 	CALL SUBOPT_0x13
0003e0 940e 04e8 	CALL _strlenf
0003e2 2f1e      	MOV  R17,R30
0003e3 6008      	ORI  R16,LOW(8)
                 _0x2040033:
0003e4 6002      	ORI  R16,LOW(2)
0003e5 770f      	ANDI R16,LOW(127)
0003e6 e030      	LDI  R19,LOW(0)
0003e7 c034      	RJMP _0x2040036
                 _0x2040035:
0003e8 36e4      	CPI  R30,LOW(0x64)
0003e9 f011      	BREQ _0x2040039
0003ea 36e9      	CPI  R30,LOW(0x69)
0003eb f411      	BRNE _0x204003A
                 _0x2040039:
0003ec 6004      	ORI  R16,LOW(4)
0003ed c002      	RJMP _0x204003B
                 _0x204003A:
0003ee 37e5      	CPI  R30,LOW(0x75)
0003ef f431      	BRNE _0x204003C
                 _0x204003B:
0003f0 e5e4      	LDI  R30,LOW(_tbl10_G102*2)
0003f1 e0f0      	LDI  R31,HIGH(_tbl10_G102*2)
0003f2 83ee      	STD  Y+6,R30
0003f3 83ff      	STD  Y+6+1,R31
0003f4 e015      	LDI  R17,LOW(5)
0003f5 c00c      	RJMP _0x204003D
                 _0x204003C:
0003f6 35e8      	CPI  R30,LOW(0x58)
0003f7 f411      	BRNE _0x204003F
0003f8 6008      	ORI  R16,LOW(8)
0003f9 c003      	RJMP _0x2040040
                 _0x204003F:
0003fa 37e8      	CPI  R30,LOW(0x78)
0003fb f009      	BREQ PC+2
0003fc c0a1      	RJMP _0x2040071
                 _0x2040040:
0003fd e5ee      	LDI  R30,LOW(_tbl16_G102*2)
0003fe e0f0      	LDI  R31,HIGH(_tbl16_G102*2)
0003ff 83ee      	STD  Y+6,R30
000400 83ff      	STD  Y+6+1,R31
000401 e014      	LDI  R17,LOW(4)
                 _0x204003D:
000402 ff02      	SBRS R16,2
000403 c014      	RJMP _0x2040042
000404 940e 0583 	CALL SUBOPT_0x11
000406 940e 0599 	CALL SUBOPT_0x14
000408 85ab      	LDD  R26,Y+11
000409 23aa      	TST  R26
00040a f43a      	BRPL _0x2040043
00040b 85ea      	LDD  R30,Y+10
00040c 85fb      	LDD  R31,Y+10+1
00040d 940e 0607 	CALL __ANEGW1
00040f 87ea      	STD  Y+10,R30
000410 87fb      	STD  Y+10+1,R31
000411 e24d      	LDI  R20,LOW(45)
                 _0x2040043:
000412 3040      	CPI  R20,0
000413 f011      	BREQ _0x2040044
000414 5f1f      	SUBI R17,-LOW(1)
000415 c001      	RJMP _0x2040045
                 _0x2040044:
000416 7f0b      	ANDI R16,LOW(251)
                 _0x2040045:
000417 c004      	RJMP _0x2040046
                 _0x2040042:
000418 940e 0583 	CALL SUBOPT_0x11
00041a 940e 0599 	CALL SUBOPT_0x14
                 _0x2040046:
                 _0x2040036:
00041c fd00      	SBRC R16,0
00041d c011      	RJMP _0x2040047
                 _0x2040048:
00041e 1715      	CP   R17,R21
00041f f478      	BRSH _0x204004A
000420 ff07      	SBRS R16,7
000421 c008      	RJMP _0x204004B
000422 ff02      	SBRS R16,2
000423 c004      	RJMP _0x204004C
000424 7f0b      	ANDI R16,LOW(251)
000425 2f24      	MOV  R18,R20
000426 5011      	SUBI R17,LOW(1)
000427 c001      	RJMP _0x204004D
                 _0x204004C:
000428 e320      	LDI  R18,LOW(48)
                 _0x204004D:
000429 c001      	RJMP _0x204004E
                 _0x204004B:
00042a e220      	LDI  R18,LOW(32)
                 _0x204004E:
00042b 940e 057c 	CALL SUBOPT_0x10
00042d 5051      	SUBI R21,LOW(1)
00042e cfef      	RJMP _0x2040048
                 _0x204004A:
                 _0x2040047:
00042f 2f31      	MOV  R19,R17
000430 ff01      	SBRS R16,1
000431 c017      	RJMP _0x204004F
                 _0x2040050:
000432 3030      	CPI  R19,0
000433 f0a1      	BREQ _0x2040052
000434 ff03      	SBRS R16,3
000435 c006      	RJMP _0x2040053
000436 81ee      	LDD  R30,Y+6
000437 81ff      	LDD  R31,Y+6+1
000438 9125      	LPM  R18,Z+
000439 83ee      	STD  Y+6,R30
00043a 83ff      	STD  Y+6+1,R31
00043b c005      	RJMP _0x2040054
                 _0x2040053:
00043c 81ae      	LDD  R26,Y+6
00043d 81bf      	LDD  R27,Y+6+1
00043e 912d      	LD   R18,X+
00043f 83ae      	STD  Y+6,R26
000440 83bf      	STD  Y+6+1,R27
                 _0x2040054:
000441 940e 057c 	CALL SUBOPT_0x10
000443 3050      	CPI  R21,0
000444 f009      	BREQ _0x2040055
000445 5051      	SUBI R21,LOW(1)
                 _0x2040055:
000446 5031      	SUBI R19,LOW(1)
000447 cfea      	RJMP _0x2040050
                 _0x2040052:
000448 c04b      	RJMP _0x2040056
                 _0x204004F:
                 _0x2040058:
000449 e320      	LDI  R18,LOW(48)
00044a 81ee      	LDD  R30,Y+6
00044b 81ff      	LDD  R31,Y+6+1
00044c 940e 060f 	CALL __GETW1PF
00044e 87e8      	STD  Y+8,R30
00044f 87f9      	STD  Y+8+1,R31
000450 81ee      	LDD  R30,Y+6
000451 81ff      	LDD  R31,Y+6+1
000452 9632      	ADIW R30,2
000453 83ee      	STD  Y+6,R30
000454 83ff      	STD  Y+6+1,R31
                 _0x204005A:
000455 85e8      	LDD  R30,Y+8
000456 85f9      	LDD  R31,Y+8+1
000457 85aa      	LDD  R26,Y+10
000458 85bb      	LDD  R27,Y+10+1
000459 17ae      	CP   R26,R30
00045a 07bf      	CPC  R27,R31
00045b f050      	BRLO _0x204005C
00045c 5f2f      	SUBI R18,-LOW(1)
00045d 85a8      	LDD  R26,Y+8
00045e 85b9      	LDD  R27,Y+8+1
00045f 85ea      	LDD  R30,Y+10
000460 85fb      	LDD  R31,Y+10+1
000461 1bea      	SUB  R30,R26
000462 0bfb      	SBC  R31,R27
000463 87ea      	STD  Y+10,R30
000464 87fb      	STD  Y+10+1,R31
000465 cfef      	RJMP _0x204005A
                 _0x204005C:
000466 332a      	CPI  R18,58
000467 f028      	BRLO _0x204005D
000468 ff03      	SBRS R16,3
000469 c002      	RJMP _0x204005E
00046a 5f29      	SUBI R18,-LOW(7)
00046b c001      	RJMP _0x204005F
                 _0x204005E:
00046c 5d29      	SUBI R18,-LOW(39)
                 _0x204005F:
                 _0x204005D:
00046d fd04      	SBRC R16,4
00046e c01a      	RJMP _0x2040061
00046f 3321      	CPI  R18,49
000470 f420      	BRSH _0x2040063
000471 85a8      	LDD  R26,Y+8
000472 85b9      	LDD  R27,Y+8+1
000473 9711      	SBIW R26,1
000474 f409      	BRNE _0x2040062
                 _0x2040063:
000475 c009      	RJMP _0x20400CD
                 _0x2040062:
000476 1753      	CP   R21,R19
000477 f010      	BRLO _0x2040067
000478 ff00      	SBRS R16,0
000479 c001      	RJMP _0x2040068
                 _0x2040067:
00047a c013      	RJMP _0x2040066
                 _0x2040068:
00047b e220      	LDI  R18,LOW(32)
00047c ff07      	SBRS R16,7
00047d c00b      	RJMP _0x2040069
00047e e320      	LDI  R18,LOW(48)
                 _0x20400CD:
00047f 6100      	ORI  R16,LOW(16)
000480 ff02      	SBRS R16,2
000481 c007      	RJMP _0x204006A
000482 7f0b      	ANDI R16,LOW(251)
000483 934a      	ST   -Y,R20
000484 940e 0589 	CALL SUBOPT_0x12
000486 3050      	CPI  R21,0
000487 f009      	BREQ _0x204006B
000488 5051      	SUBI R21,LOW(1)
                 _0x204006B:
                 _0x204006A:
                 _0x2040069:
                 _0x2040061:
000489 940e 057c 	CALL SUBOPT_0x10
00048b 3050      	CPI  R21,0
00048c f009      	BREQ _0x204006C
00048d 5051      	SUBI R21,LOW(1)
                 _0x204006C:
                 _0x2040066:
00048e 5031      	SUBI R19,LOW(1)
00048f 85a8      	LDD  R26,Y+8
000490 85b9      	LDD  R27,Y+8+1
000491 9712      	SBIW R26,2
000492 f008      	BRLO _0x2040059
000493 cfb5      	RJMP _0x2040058
                 _0x2040059:
                 _0x2040056:
000494 ff00      	SBRS R16,0
000495 c008      	RJMP _0x204006D
                 _0x204006E:
000496 3050      	CPI  R21,0
000497 f031      	BREQ _0x2040070
000498 5051      	SUBI R21,LOW(1)
000499 e2e0      	LDI  R30,LOW(32)
00049a 93ea      	ST   -Y,R30
00049b 940e 0589 	CALL SUBOPT_0x12
00049d cff8      	RJMP _0x204006E
                 _0x2040070:
                 _0x204006D:
                 _0x2040071:
                 _0x2040030:
                 _0x20400CC:
00049e e010      	LDI  R17,LOW(0)
                 _0x204001B:
00049f cee0      	RJMP _0x2040016
                 _0x2040018:
0004a0 85ac      	LDD  R26,Y+12
0004a1 85bd      	LDD  R27,Y+12+1
0004a2 940e 060b 	CALL __GETW1P
0004a4 940e 0641 	CALL __LOADLOCR6
0004a6 9664      	ADIW R28,20
0004a7 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0004a8 92ff      	PUSH R15
0004a9 2ef8      	MOV  R15,R24
0004aa 9726      	SBIW R28,6
0004ab 940e 063c 	CALL __SAVELOCR4
0004ad 940e 05a1 	CALL SUBOPT_0x15
0004af 9730      	SBIW R30,0
0004b0 f419      	BRNE _0x2040072
0004b1 efef      	LDI  R30,LOW(65535)
0004b2 efff      	LDI  R31,HIGH(65535)
0004b3 c023      	RJMP _0x20C0001
                 _0x2040072:
0004b4 01de      	MOVW R26,R28
0004b5 9616      	ADIW R26,6
0004b6 940e 0603 	CALL __ADDW2R15
0004b8 018d      	MOVW R16,R26
0004b9 940e 05a1 	CALL SUBOPT_0x15
0004bb 83ee      	STD  Y+6,R30
0004bc 83ff      	STD  Y+6+1,R31
0004bd e0e0      	LDI  R30,LOW(0)
0004be 87e8      	STD  Y+8,R30
0004bf 87e9      	STD  Y+8+1,R30
0004c0 01de      	MOVW R26,R28
0004c1 961a      	ADIW R26,10
0004c2 940e 0603 	CALL __ADDW2R15
0004c4 940e 060b 	CALL __GETW1P
0004c6 93fa      	ST   -Y,R31
0004c7 93ea      	ST   -Y,R30
0004c8 931a      	ST   -Y,R17
0004c9 930a      	ST   -Y,R16
0004ca e3e4      	LDI  R30,LOW(_put_buff_G102)
0004cb e0f3      	LDI  R31,HIGH(_put_buff_G102)
0004cc 93fa      	ST   -Y,R31
0004cd 93ea      	ST   -Y,R30
0004ce 01de      	MOVW R26,R28
0004cf 961a      	ADIW R26,10
0004d0 dea3      	RCALL __print_G102
0004d1 019f      	MOVW R18,R30
0004d2 81ae      	LDD  R26,Y+6
0004d3 81bf      	LDD  R27,Y+6+1
0004d4 e0e0      	LDI  R30,LOW(0)
0004d5 93ec      	ST   X,R30
0004d6 01f9      	MOVW R30,R18
                 _0x20C0001:
0004d7 940e 0643 	CALL __LOADLOCR4
0004d9 962a      	ADIW R28,10
0004da 90ff      	POP  R15
0004db 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0004dc 93ba      	ST   -Y,R27
0004dd 93aa      	ST   -Y,R26
0004de 91a9          ld   r26,y+
0004df 91b9          ld   r27,y+
0004e0 27ee          clr  r30
0004e1 27ff          clr  r31
                 strlen0:
0004e2 916d          ld   r22,x+
0004e3 2366          tst  r22
0004e4 f011          breq strlen1
0004e5 9631          adiw r30,1
0004e6 cffb          rjmp strlen0
                 strlen1:
0004e7 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0004e8 93ba      	ST   -Y,R27
0004e9 93aa      	ST   -Y,R26
0004ea 27aa          clr  r26
0004eb 27bb          clr  r27
0004ec 91e9          ld   r30,y+
0004ed 91f9          ld   r31,y+
                 strlenf0:
0004ee 9005      	lpm  r0,z+
0004ef 2000          tst  r0
0004f0 f011          breq strlenf1
0004f1 9611          adiw r26,1
0004f2 cffb          rjmp strlenf0
                 strlenf1:
0004f3 01fd          movw r30,r26
0004f4 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 _bcd2bin:
                 ; .FSTART _bcd2bin
0004f5 93aa      	ST   -Y,R26
0004f6 81e8          ld   r30,y
0004f7 95e2          swap r30
0004f8 70ef          andi r30,0xf
0004f9 2fae          mov  r26,r30
0004fa 0faa          lsl  r26
0004fb 0faa          lsl  r26
0004fc 0fea          add  r30,r26
0004fd 0fee          lsl  r30
0004fe 91a9          ld   r26,y+
0004ff 70af          andi r26,0xf
000500 0fea          add  r30,r26
000501 9508          ret
                 ; .FEND
                 _bin2bcd:
                 ; .FSTART _bin2bcd
000502 93aa      	ST   -Y,R26
000503 91a9          ld   r26,y+
000504 27ee          clr  r30
                 bin2bcd0:
000505 50aa          subi r26,10
000506 f012          brmi bin2bcd1
000507 5fe0          subi r30,-16
000508 cffc          rjmp bin2bcd0
                 bin2bcd1:
000509 5fa6          subi r26,-10
00050a 0fea          add  r30,r26
00050b 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 _rtc_status:
000171           	.BYTE 0x1
                 _lcd_buff:
000172           	.BYTE 0x10
                 _alarm_state:
000182           	.BYTE 0x4
                 
                 	.ESEG
                 _alarmstate:
000000           	.BYTE 0x1
                 _alhour:
000001           	.BYTE 0x1
                 _alminute:
000002           	.BYTE 0x1
                 
                 	.DSEG
                 __base_y_G101:
000186           	.BYTE 0x4
                 __lcd_maxx:
00018a           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x0:
00050c e0a0      	LDI  R26,LOW(_alarmstate)
00050d e0b0      	LDI  R27,HIGH(_alarmstate)
00050e 940e 0618 	CALL __EEPROMRDB
000510 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
000511 e8e2      	LDI  R30,LOW(_alarm_state)
000512 e0f1      	LDI  R31,HIGH(_alarm_state)
000513 93fa      	ST   -Y,R31
000514 93ea      	ST   -Y,R30
000515 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000516 93fa      	ST   -Y,R31
000517 93ea      	ST   -Y,R30
000518 e080      	LDI  R24,0
000519 940e 04a8 	CALL _sprintf
00051b 9624      	ADIW R28,4
00051c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:45 WORDS
                 SUBOPT_0x3:
00051d e0e0      	LDI  R30,LOW(0)
00051e 93ea      	ST   -Y,R30
00051f e0e7      	LDI  R30,LOW(7)
000520 e0f0      	LDI  R31,HIGH(7)
000521 93fa      	ST   -Y,R31
000522 93ea      	ST   -Y,R30
000523 e0e6      	LDI  R30,LOW(6)
000524 e0f0      	LDI  R31,HIGH(6)
000525 93fa      	ST   -Y,R31
000526 93ea      	ST   -Y,R30
000527 e0e9      	LDI  R30,LOW(9)
000528 e0f0      	LDI  R31,HIGH(9)
000529 93fa      	ST   -Y,R31
00052a 93ea      	ST   -Y,R30
00052b e0a8      	LDI  R26,LOW(8)
00052c e0b0      	LDI  R27,HIGH(8)
00052d 940c 0265 	JMP  _rtc_get_time
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x4:
00052f f821      	BLD  R2,1
000530 e3a2      	LDI  R26,LOW(50)
000531 e0b0      	LDI  R27,0
000532 940e 05f9 	CALL _delay_ms
000534 e0a0      	LDI  R26,0
000535 fc21      	SBRC R2,1
000536 e0a1      	LDI  R26,1
000537 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x5:
000538 2bea      	OR   R30,R26
000539 940e 0635 	CALL __BSTB1
00053b f821      	BLD  R2,1
00053c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6:
00053d e0e0      	LDI  R30,LOW(0)
00053e 93ea      	ST   -Y,R30
00053f e0a0      	LDI  R26,LOW(0)
000540 940e 0289 	CALL _rtc_set_time
000542 cfda      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
000543 e0a1      	LDI  R26,LOW(_alhour)
000544 e0b0      	LDI  R27,HIGH(_alhour)
000545 940e 0618 	CALL __EEPROMRDB
000547 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8:
000548 e0a2      	LDI  R26,LOW(_alminute)
000549 e0b0      	LDI  R27,HIGH(_alminute)
00054a 940e 0618 	CALL __EEPROMRDB
00054c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x9:
00054d 27ff      	CLR  R31
00054e 2766      	CLR  R22
00054f 2777      	CLR  R23
000550 940e 0613 	CALL __PUTPARD1
000552 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
000553 940e 02c5 	CALL _lcd_gotoxy
000555 e7a2      	LDI  R26,LOW(_lcd_buff)
000556 e0b1      	LDI  R27,HIGH(_lcd_buff)
000557 940c 02f5 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xB:
000559 93aa      	ST   -Y,R26
00055a 81a8      	LD   R26,Y
00055b 940e 020b 	CALL _rtc_get_status
00055d 91e0 0171 	LDS  R30,_rtc_status
00055f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0xC:
000560 93e0 0171 	STS  _rtc_status,R30
000562 81e8      	LD   R30,Y
000563 93ea      	ST   -Y,R30
000564 e0e0      	LDI  R30,LOW(0)
000565 93ea      	ST   -Y,R30
000566 91a0 0171 	LDS  R26,_rtc_status
000568 940c 01f9 	JMP  _rtc_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
00056a 940e 025a 	CALL _rtc_write_bcd
00056c 81ec      	LDD  R30,Y+4
00056d 93ea      	ST   -Y,R30
00056e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
00056f 940e 02b9 	CALL __lcd_write_data
000571 e0a3      	LDI  R26,LOW(3)
000572 e0b0      	LDI  R27,0
000573 940c 05f9 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xF:
000575 e3a0      	LDI  R26,LOW(48)
000576 940e 02a5 	CALL __lcd_write_nibble_G101
                +
000578 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000579 958a     +DEC R24
00057a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
00057b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x10:
00057c 932a      	ST   -Y,R18
00057d 85ad      	LDD  R26,Y+13
00057e 85be      	LDD  R27,Y+13+1
00057f 85ef      	LDD  R30,Y+15
000580 89f8      	LDD  R31,Y+15+1
000581 9509      	ICALL
000582 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x11:
000583 89e8      	LDD  R30,Y+16
000584 89f9      	LDD  R31,Y+16+1
000585 9734      	SBIW R30,4
000586 8be8      	STD  Y+16,R30
000587 8bf9      	STD  Y+16+1,R31
000588 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x12:
000589 85ad      	LDD  R26,Y+13
00058a 85be      	LDD  R27,Y+13+1
00058b 85ef      	LDD  R30,Y+15
00058c 89f8      	LDD  R31,Y+15+1
00058d 9509      	ICALL
00058e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x13:
00058f 89a8      	LDD  R26,Y+16
000590 89b9      	LDD  R27,Y+16+1
000591 9614      	ADIW R26,4
000592 940e 060b 	CALL __GETW1P
000594 83ee      	STD  Y+6,R30
000595 83ff      	STD  Y+6+1,R31
000596 81ae      	LDD  R26,Y+6
000597 81bf      	LDD  R27,Y+6+1
000598 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x14:
000599 89a8      	LDD  R26,Y+16
00059a 89b9      	LDD  R27,Y+16+1
00059b 9614      	ADIW R26,4
00059c 940e 060b 	CALL __GETW1P
00059e 87ea      	STD  Y+10,R30
00059f 87fb      	STD  Y+10+1,R31
0005a0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
0005a1 01de      	MOVW R26,R28
0005a2 961c      	ADIW R26,12
0005a3 940e 0603 	CALL __ADDW2R15
0005a5 940e 060b 	CALL __GETW1P
0005a7 9508      	RET
                 
                 
                 	.CSEG
                 	.equ __sda_bit=1
                 	.equ __scl_bit=0
                 	.equ __i2c_port=0x15 ;PORTC
                 	.equ __i2c_dir=__i2c_port-1
                 	.equ __i2c_pin=__i2c_port-2
                 
                 _i2c_init:
0005a8 98a8      	cbi  __i2c_port,__scl_bit
0005a9 98a9      	cbi  __i2c_port,__sda_bit
0005aa 9aa0      	sbi  __i2c_dir,__scl_bit
0005ab 98a1      	cbi  __i2c_dir,__sda_bit
0005ac c015      	rjmp __i2c_delay2
                 _i2c_start:
0005ad 98a1      	cbi  __i2c_dir,__sda_bit
0005ae 98a0      	cbi  __i2c_dir,__scl_bit
0005af 27ee      	clr  r30
0005b0 0000      	nop
0005b1 9b99      	sbis __i2c_pin,__sda_bit
0005b2 9508      	ret
0005b3 9b98      	sbis __i2c_pin,__scl_bit
0005b4 9508      	ret
0005b5 d004      	rcall __i2c_delay1
0005b6 9aa1      	sbi  __i2c_dir,__sda_bit
0005b7 d002      	rcall __i2c_delay1
0005b8 9aa0      	sbi  __i2c_dir,__scl_bit
0005b9 e0e1      	ldi  r30,1
                 __i2c_delay1:
0005ba e062      	ldi  r22,2
0005bb c007      	rjmp __i2c_delay2l
                 _i2c_stop:
0005bc 9aa1      	sbi  __i2c_dir,__sda_bit
0005bd 9aa0      	sbi  __i2c_dir,__scl_bit
0005be d003      	rcall __i2c_delay2
0005bf 98a0      	cbi  __i2c_dir,__scl_bit
0005c0 dff9      	rcall __i2c_delay1
0005c1 98a1      	cbi  __i2c_dir,__sda_bit
                 __i2c_delay2:
0005c2 e063      	ldi  r22,3
                 __i2c_delay2l:
0005c3 956a      	dec  r22
0005c4 f7f1      	brne __i2c_delay2l
0005c5 9508      	ret
                 _i2c_read:
0005c6 e078      	ldi  r23,8
                 __i2c_read0:
0005c7 98a0      	cbi  __i2c_dir,__scl_bit
0005c8 dff1      	rcall __i2c_delay1
                 __i2c_read3:
0005c9 9b98      	sbis __i2c_pin,__scl_bit
0005ca cffe      	rjmp __i2c_read3
0005cb dfee      	rcall __i2c_delay1
0005cc 9488      	clc
0005cd 9999      	sbic __i2c_pin,__sda_bit
0005ce 9408      	sec
0005cf 9aa0      	sbi  __i2c_dir,__scl_bit
0005d0 dff1      	rcall __i2c_delay2
0005d1 1fee      	rol  r30
0005d2 957a      	dec  r23
0005d3 f799      	brne __i2c_read0
0005d4 2f7a      	mov  r23,r26
0005d5 2377      	tst  r23
0005d6 f411      	brne __i2c_read1
0005d7 98a1      	cbi  __i2c_dir,__sda_bit
0005d8 c001      	rjmp __i2c_read2
                 __i2c_read1:
0005d9 9aa1      	sbi  __i2c_dir,__sda_bit
                 __i2c_read2:
0005da dfdf      	rcall __i2c_delay1
0005db 98a0      	cbi  __i2c_dir,__scl_bit
0005dc dfe5      	rcall __i2c_delay2
0005dd 9aa0      	sbi  __i2c_dir,__scl_bit
0005de dfdb      	rcall __i2c_delay1
0005df 98a1      	cbi  __i2c_dir,__sda_bit
0005e0 cfd9      	rjmp __i2c_delay1
                 
                 _i2c_write:
0005e1 e078      	ldi  r23,8
                 __i2c_write0:
0005e2 0faa      	lsl  r26
0005e3 f410      	brcc __i2c_write1
0005e4 98a1      	cbi  __i2c_dir,__sda_bit
0005e5 c001      	rjmp __i2c_write2
                 __i2c_write1:
0005e6 9aa1      	sbi  __i2c_dir,__sda_bit
                 __i2c_write2:
0005e7 dfda      	rcall __i2c_delay2
0005e8 98a0      	cbi  __i2c_dir,__scl_bit
0005e9 dfd0      	rcall __i2c_delay1
                 __i2c_write3:
0005ea 9b98      	sbis __i2c_pin,__scl_bit
0005eb cffe      	rjmp __i2c_write3
0005ec dfcd      	rcall __i2c_delay1
0005ed 9aa0      	sbi  __i2c_dir,__scl_bit
0005ee 957a      	dec  r23
0005ef f791      	brne __i2c_write0
0005f0 98a1      	cbi  __i2c_dir,__sda_bit
0005f1 dfc8      	rcall __i2c_delay1
0005f2 98a0      	cbi  __i2c_dir,__scl_bit
0005f3 dfce      	rcall __i2c_delay2
0005f4 e0e1      	ldi  r30,1
0005f5 9999      	sbic __i2c_pin,__sda_bit
0005f6 27ee      	clr  r30
0005f7 9aa0      	sbi  __i2c_dir,__scl_bit
0005f8 cfc1      	rjmp __i2c_delay1
                 
                 _delay_ms:
0005f9 9610      	adiw r26,0
0005fa f039      	breq __delay_ms1
                 __delay_ms0:
                +
0005fb ef8a     +LDI R24 , LOW ( 0xFA )
0005fc e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
0005fd 9701     +SBIW R24 , 1
0005fe f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
0005ff 95a8      	wdr
000600 9711      	sbiw r26,1
000601 f7c9      	brne __delay_ms0
                 __delay_ms1:
000602 9508      	ret
                 
                 __ADDW2R15:
000603 2400      	CLR  R0
000604 0daf      	ADD  R26,R15
000605 1db0      	ADC  R27,R0
000606 9508      	RET
                 
                 __ANEGW1:
000607 95f1      	NEG  R31
000608 95e1      	NEG  R30
000609 40f0      	SBCI R31,0
00060a 9508      	RET
                 
                 __GETW1P:
00060b 91ed      	LD   R30,X+
00060c 91fc      	LD   R31,X
00060d 9711      	SBIW R26,1
00060e 9508      	RET
                 
                 __GETW1PF:
00060f 9005      	LPM  R0,Z+
000610 91f4      	LPM  R31,Z
000611 2de0      	MOV  R30,R0
000612 9508      	RET
                 
                 __PUTPARD1:
000613 937a      	ST   -Y,R23
000614 936a      	ST   -Y,R22
000615 93fa      	ST   -Y,R31
000616 93ea      	ST   -Y,R30
000617 9508      	RET
                 
                 __EEPROMRDB:
000618 99e1      	SBIC EECR,EEWE
000619 cffe      	RJMP __EEPROMRDB
00061a 93ff      	PUSH R31
00061b b7ff      	IN   R31,SREG
00061c 94f8      	CLI
00061d bbae      	OUT  EEARL,R26
00061e bbbf      	OUT  EEARH,R27
00061f 9ae0      	SBI  EECR,EERE
000620 b3ed      	IN   R30,EEDR
000621 bfff      	OUT  SREG,R31
000622 91ff      	POP  R31
000623 9508      	RET
                 
                 __EEPROMWRB:
000624 9be1      	SBIS EECR,EEWE
000625 c002      	RJMP __EEPROMWRB1
000626 95a8      	WDR
000627 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
000628 b79f      	IN   R25,SREG
000629 94f8      	CLI
00062a bbae      	OUT  EEARL,R26
00062b bbbf      	OUT  EEARH,R27
00062c 9ae0      	SBI  EECR,EERE
00062d b38d      	IN   R24,EEDR
00062e 17e8      	CP   R30,R24
00062f f019      	BREQ __EEPROMWRB0
000630 bbed      	OUT  EEDR,R30
000631 9ae2      	SBI  EECR,EEMWE
000632 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000633 bf9f      	OUT  SREG,R25
000634 9508      	RET
                 
                 __BSTB1:
000635 94e8      	CLT
000636 23ee      	TST  R30
000637 f009      	BREQ PC+2
000638 9468      	SET
000639 9508      	RET
                 
                 __SAVELOCR6:
00063a 935a      	ST   -Y,R21
                 __SAVELOCR5:
00063b 934a      	ST   -Y,R20
                 __SAVELOCR4:
00063c 933a      	ST   -Y,R19
                 __SAVELOCR3:
00063d 932a      	ST   -Y,R18
                 __SAVELOCR2:
00063e 931a      	ST   -Y,R17
00063f 930a      	ST   -Y,R16
000640 9508      	RET
                 
                 __LOADLOCR6:
000641 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000642 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000643 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000644 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000645 8119      	LDD  R17,Y+1
000646 8108      	LD   R16,Y
000647 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  13 r1 :   3 r2 :  10 r3 :   0 r4 :   4 r5 :   2 r6 :   4 r7 :   4 
r8 :   0 r9 :   1 r10:   5 r11:   5 r12:   4 r13:   4 r14:   0 r15:   6 
r16:  34 r17:  34 r18:  29 r19:   8 r20:   9 r21:  17 r22:  12 r23:  11 
r24:  30 r25:   7 r26: 176 r27:  57 r28:  18 r29:   1 r30: 344 r31:  85 
x  :  27 y  : 295 z  :  15 
Registers used: 32 out of 35 (91.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   6 
adiw  :  29 and   :   0 andi  :  11 asr   :   0 bclr  :   0 bld   :   4 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  22 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  10 
brlt  :   0 brmi  :   2 brne  :  41 brpl  :   1 brsh  :   4 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  : 139 
cbi   :  22 cbr   :   0 clc   :   1 clh   :   0 cli   :   3 cln   :   0 
clr   :  19 cls   :   0 clt   :   7 clv   :   0 clz   :   0 com   :   0 
cp    :  10 cpc   :   3 cpi   :  42 cpse  :   0 dec   :  10 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   7 inc   :   4 jmp   :  27 ld    :  45 ldd   : 111 ldi   : 190 
lds   :   3 lpm   :  14 lsl   :   6 lsr   :   0 mov   :  35 movw  :  16 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   1 or    :   2 
ori   :  12 out   :  31 pop   :   2 push  :   2 rcall :  49 ret   :  44 
reti  :   1 rjmp  :  91 rol   :   1 ror   :   0 sbc   :   1 sbci  :   2 
sbi   :  22 sbic  :  13 sbis  :   6 sbiw  :  17 sbr   :   0 sbrc  :   8 
sbrs  :  10 sec   :   1 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   6 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 138 std   :  31 sts   :   6 sub   :   1 subi  :  21 swap  :   2 
tst   :   6 wdr   :   2 
Instructions used: 67 out of 116 (57.8%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000c90   3110    106   3216   16384  19.6%
[.dseg] 0x000060 0x00018b      0     43     43    1024   4.2%
[.eseg] 0x000000 0x000003      0      3      3     512   0.6%

Assembly complete, 0 errors, 11 warnings
